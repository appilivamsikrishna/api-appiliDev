{
  "swagger": "2.0",
  "info": {
    "description": "APIs documentation is fun. The below is CRUD API developed using AWS tools. Anyone can use this APIs in their project., Please contact me if you get errors with CORS issues.",
    "version": "1.3",
    "title": "Appili OpenSource APIs",
    "contact": {
      "name": "Appili Vamsi Krishna",
      "url": "https://appili.dev",
      "email": "appilivamsikrishna@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "appili.gives",
  "basePath": "",
  "tags": [
    {
      "name": "items",
      "description": "everything about the usage, & its operations with the DynamoDB"
    },
    {
      "name": "open",
      "description": "new set of opensouce APIs will be available soon. stay tuned !"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/items": {
      "put": {
        "tags": ["items"],
        "summary": "Update or create an item by id",
        "description": "",
        "operationId": "updatePet",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": { "$ref": "#/definitions/Item" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "example": "RPA configuration completed with id {id}"
            }
          }
        },
        "security": [{ "appili_auth": ["write:items", "read:items"] }]
      },
      "get": {
        "tags": ["items"],
        "summary": "fetch all items from the database",
        "description": "This API call fetches all items from the database",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Item" }
            }
          }
        },
        "security": [{ "appili_auth": ["write:items", "read:items"] }]
      }
    },
    "/items/{id}": {
      "get": {
        "tags": ["items"],
        "summary": "fetch 1 item from database by id",
        "description": "This API call item by id",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Item" }
            }
          },
          "404": {
            "description": "Item not found",
            "schema": {
              "type": "string",
              "example": "item with item id: {id} not found"
            }
          }
        },
        "security": [{ "appili_auth": ["write:items", "read:items"] }]
      },
      "delete": {
        "tags": ["items"],
        "summary": "Deletes item by id",
        "description": "To delete an item by id",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of item",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "Deleted item :{id}" },
          "404": {
            "description": "Item not found",
            "schema": {
              "type": "string",
              "example": "item with item id: {id} not found"
            }
          }
        },
        "security": [{ "appili_auth": ["write:items", "read:items"] }]
      }
    }
  },
  "securityDefinitions": {
    "api_key": { "type": "apiKey", "name": "api_key", "in": "header" },
    "appili_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://appili.dev/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "read:items": "read items",
        "write:items": "modify items"
      }
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": { "type": "integer", "format": "int32" },
        "type": { "type": "string" },
        "message": { "type": "string" }
      }
    },
    "Data404": {
      "type": "string",
      "example": "fuck my ass"
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" }
      },
      "xml": { "name": "Tag" }
    },
    "Order": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "petId": { "type": "integer", "format": "int64" },
        "quantity": { "type": "integer", "format": "int32" },
        "shipDate": { "type": "string", "format": "date-time" },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": ["placed", "approved", "delivered"]
        },
        "complete": { "type": "boolean" }
      },
      "xml": { "name": "Order" }
    },
    "Item": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "example": "48202",
          "required": true
        },
        "count": { "type": "integer", "example": 12 },
        "dataArray": {
          "type": "array",
          "xml": { "wrapped": true },
          "items": { "type": "string", "xml": { "name": "dataArray" } }
        }
      },
      "xml": { "name": "Pet" }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "username": { "type": "string" },
        "firstName": { "type": "string" },
        "lastName": { "type": "string" },
        "email": { "type": "string" },
        "password": { "type": "string" },
        "phone": { "type": "string" },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": { "name": "User" }
    }
  }
}
